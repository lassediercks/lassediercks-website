<% include partials/head %>
<body class='ld hld'>
  <% include partials/topbar %>

  <header class="hld-header hld-header--ui-lib">
    <h1 class="ld-headline">Jimdo Icons</h1>
    <span class="">building a home for iconography</span>
    <div class="hld-tag-group">
      <span class="ld-tag">Gulp</span>
      <span class="ld-tag">NPM</span>
      <span class="ld-tag">Bower</span>
    </div>
  </header>
  <main class="hld-content">
    <section class="hld-section">
      <p class="ld-paragraph ld-paragraph--centered">
        Where does someone start with icon consistency? In the beginning, we slowly replaced pngs with an iconfont generated by icomoon. With a team steadily growing and an increasing amount of icons, reliable versioning and a single source of truth are necessary constraints.
      </p>
      <div class="ld-heading">
        <h3 class="ld-heading__title">Looking under the roof</h3>
      </div>
      <p class="ld-paragraph ld-paragraph--centered">
        There have been three ways of using an icon in the interface before this project.
      </p>
      <ul class="ld-list ld-list--centered">
        <li class="ld-list__item">a class in the html like icon-trash-bin</li>
        <li class="ld-list__item">the entity for the font in css like content:"\e536"; </li>
        <li class="ld-list__item">a scss-variable which stored the entity. content: $trashbin; </li>
      </ul>

      <div class="ld-heading">
        <h3 class="ld-heading__title">Defining the scope</h3>
      </div>
      <p class="ld-paragraph ld-paragraph--centered">
        Using icomoon to perform the needed tasks caused the following problems:
      </p>
      <ul class="ld-list ld-list--centered">
        <li class="ld-list__item">There is no source control. You can’t roll back. It takes practice and awareness to know how to add an icon without changing the character code</li>
        <li class="ld-list__item">The sass variables have been created manually and were named differently than the icons. So finding the variable which stored an altered char-code was… challenging</li>
        <li class="ld-list__item">We needed three fonts. For the presentational website, the user-facing website and the cms. So changing one icon came with a threefold risk and effort.</li>
      </ul>

      <p class="ld-paragraph ld-paragraph--centered">
        The featureset of the betterSolution™:
      </p>
      <ul class="ld-list ld-list--centered">
        <li class="ld-list__item">Single-source of truth for icons</li>
        <li class="ld-list__item">Automatically create char-code-variables</li>
        <li class="ld-list__item">Reliable versioning</li>
        <li class="ld-list__item">Generate 3 fonts with the same icon source</li>
      </ul>

      <div class="ld-heading">
        <h3 class="ld-heading__title">Get to business</h3>
      </div>

      <p class="ld-paragraph ld-paragraph--centered">
        Let me introduce you to my new friends
      </p>

      <img src="./img/gulp_and_npm.png" alt="The icons of gulp and npm" class="hld-image">


      <p class="ld-paragraph ld-paragraph--centered">
        I used the gulp-iconfont package that does a good job with creating font files out of a bunch of svgs. 
        <br><br>
        What I had to build manually was a way to take the svg names and the char codes and turn them into sass variables. Additionally to generate not one but three iconfonts out of the same svgs. 
        For versioning we used semver so you could safely roll back to a previous icon version if something went wrong.
        <br><br>Later on we automated the build and deploy process with travis. To sugarcoat the whole thing we added autoreleasing based on commit styles.
        <br><br>To guarantee easy access the source-code organisation was done in github. Github pages came into play for an overview.
      </p>

      <div class="ld-browserframe">
        <div class="ld-browserframe__head">
          <div class="ld-browserframe__buttons">
            <span></span>
            <span></span>
            <span></span>
          </div>
          <div class="ld-browserframe__url"></div>
        </div>
        <img class="ld-browserframe__image" src="./img/jimdo-icons.png" alt="Screenshot of Jimdo Icons">
      </div>


      <p class="ld-paragraph ld-paragraph--centered">
        This project was my first approach in solving things on my own with gulp. Another learning was that there is a downside when lot of people reach out to consult you. It's rewarding but has to be taken with a grain of salt. At least when there is no dedicated role for a topic, everyone should be able to do it or there will be a bottleneck. With this tool under our belt I freed myself from being the person in charge of icons and created a space for collaboration and consistency.
        <br><br>
        <a href="http://jimdo.github.io/jimdo-icons" class="ld-link">Check out the jimdo-icons demo</a>
      </p>
    </section>

  </main>

  <% include partials/footer %>
